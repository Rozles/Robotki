#!/usr/bin/python3

import sys
import math
import rospy
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
import tf.transformations as tft
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, PoseStamped
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA


class The_Ring:
    def __init__(self):
        rospy.init_node('ring_detection', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for visualizations
        self.candidates = MarkerArray()
        self.ring_n = []

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('ring_markers', MarkerArray, queue_size=1)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)
        self.tf_listener

    def angle_between(self, q1, q2):
        a1 = tft.euler_from_quaternion([q1.x, q1.y, q1.z, q1.w])[2]
        a2 = tft.euler_from_quaternion([q2.x, q2.y, q2.z, q2.w])[2]
        return abs(a1 - a2)


    def update_marker_array(self, pose, color):
        new_ring = True
        marker_array = MarkerArray()
        for i, r in enumerate(self.candidates.markers):
            if np.sqrt((r.pose.position.x - pose.pose.position.x)**2 + (r.pose.position.y - pose.pose.position.y)**2) < 0.5:
                new_ring = False
                if self.angle_between(r.pose.orientation, pose.pose.orientation) < 1.57:
                    r.pose.orientation.x = (r.pose.orientation.x * self.ring_n[i] + pose.pose.orientation.x) / (self.ring_n[i] + 1)
                    r.pose.orientation.y = (r.pose.orientation.y * self.ring_n[i] + pose.pose.orientation.y) / (self.ring_n[i] + 1)
                    r.pose.orientation.z = (r.pose.orientation.z * self.ring_n[i] + pose.pose.orientation.z) / (self.ring_n[i] + 1)
                    r.pose.orientation.w = (r.pose.orientation.w * self.ring_n[i] + pose.pose.orientation.w) / (self.ring_n[i] + 1)
                else:
                    angle = tft.euler_from_quaternion([pose.pose.orientation.x, pose.pose.orientation.y, pose.pose.orientation.z, pose.pose.orientation.w])[2] + 1.57
                    q = tft.quaternion_from_euler(0.0, 0.0, angle)
                    r.pose.orientation.x = (r.pose.orientation.x * self.ring_n[i] + q[0]) / (self.ring_n[i] + 1)
                    r.pose.orientation.y = (r.pose.orientation.y * self.ring_n[i] + q[1]) / (self.ring_n[i] + 1)
                    r.pose.orientation.z = (r.pose.orientation.z * self.ring_n[i] + q[2]) / (self.ring_n[i] + 1)
                    r.pose.orientation.w = (r.pose.orientation.w * self.ring_n[i] + q[3]) / (self.ring_n[i] + 1)
                r.pose.position.x = (r.pose.position.x * self.ring_n[i] + pose.pose.position.x) / (self.ring_n[i] + 1)
                r.pose.position.y = (r.pose.position.y * self.ring_n[i] + pose.pose.position.y) / (self.ring_n[i] + 1)
                r.pose.position.z = (r.pose.position.z * self.ring_n[i] + pose.pose.position.z) / (self.ring_n[i] + 1)
                r.color.r = (r.color.r * self.ring_n[i] + color.r) / (self.ring_n[i] + 1)
                r.color.g = (r.color.g * self.ring_n[i] + color.g) / (self.ring_n[i] + 1)
                r.color.b = (r.color.b * self.ring_n[i] + color.b) / (self.ring_n[i] + 1)
                self.ring_n[i] += 1
            if self.ring_n[i] >= 3:
                marker_array.markers.append(r)
        if new_ring:
            marker = Marker()
            marker.header.stamp = pose.header.stamp
            marker.header.frame_id = pose.header.frame_id
            marker.pose = pose.pose
            marker.type = Marker.SPHERE
            marker.action = Marker.ADD
            marker.frame_locked = False
            marker.lifetime = rospy.Duration(0)
            marker.id = len(self.candidates.markers)
            marker.scale = Vector3(0.1, 0.1, 0.1)
            marker.color = color
            self.candidates.markers.append(marker)
            self.ring_n.append(1)
        self.markers_pub.publish(marker_array)



    def get_pose(self,e,depth_image, center, timestamp, color):
        # Calculate the position of the detected ellipse
        dist = float(np.nanmean(depth_image))

        k_f = 525 # kinect focal length in pixels

        elipse_x = self.dims[1] / 2 - e[0][0]
        elipse_y = self.dims[0] / 2 - e[0][1]
        elipse_left = elipse_x - center // 2
        elipse_right = elipse_x + (depth_image.shape[1] - center) // 2
        dist_left = float(np.nanmean(depth_image[:,:center]))
        dist_right = float(np.nanmean(depth_image[:,center:]))

        angle_to_target = np.arctan2(elipse_x,k_f)
        angle_height = np.arctan2(elipse_y, k_f)
        angle_left = np.arctan2(elipse_left,k_f)
        angle_right = np.arctan2(elipse_right,k_f)

        # Get the angles in the base_link relative coordinate system
        x,y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)
        z = dist*np.sin(angle_height)
        lx, ly = dist_left*np.cos(angle_left), dist_left*np.sin(angle_left)
        rx, ry = dist_right*np.cos(angle_right), dist_right*np.sin(angle_right)
        normalAngle = np.arctan2(-(lx - rx), (ly - ry)) + math.pi
        q = tft.quaternion_from_euler(0.0, 0.0, normalAngle)

        ### Define a stamped message for transformation - directly in "base_frame"
        pose_s = PoseStamped()
        pose_s.pose.position.x = x
        pose_s.pose.position.y = y
        pose_s.pose.position.z = z + 0.30
        pose_s.pose.orientation.x = q[0]
        pose_s.pose.orientation.y = q[1]
        pose_s.pose.orientation.z = q[2]
        pose_s.pose.orientation.w = q[3]
        pose_s.header.frame_id = "base_link"
        pose_s.header.stamp = timestamp

        # Define a stamped message for transformation - in the "camera rgb frame"
        # point_s = PointStamped()
        # point_s.point.x = -y
        # point_s.point.y = 0
        # point_s.point.z = x
        # point_s.header.frame_id = "camera_rgb_frame"
        # point_s.header.stamp = timestamp

        # Get the point in the "map" coordinate system
        try:
            pose_world = self.tf_buf.transform(pose_s, "map")
        except Exception as e:
            print(e)
            return
        
        # Create a Pose object with the same position

        self.update_marker_array(pose_world, color)
    

    def find_ring(self):
        try:
            rgb_image_message = rospy.wait_for_message("/camera/rgb/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        try:
            depth_image_message = rospy.wait_for_message("/camera/depth/image_raw", Image)
        except Exception as e:
            print(e)
            return 0
        
        timestamp = depth_image_message.header.stamp

        # Convert the images into a OpenCV (numpy) format
        try:
            cv_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
        except CvBridgeError as e:
            print(e)

        try:
            depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = cv_image.shape

        # Tranform image to gayscale
        #gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        #img = cv2.equalizeHist(gray)
        
        depth_norm = cv2.normalize(depth_image, None, 255, 0, cv2.NORM_MINMAX, cv2.CV_8U)      

        canny = cv2.Canny(depth_norm, 100, 200)
        #cv2.imshow('canny', canny)
        #cv2.waitKey(1)

        

        ### Binarize the image, there are different ways to do it
        #ret, thresh = cv2.threshold(img, 50, 255, 0)
        #ret, thresh = cv2.threshold(img, 70, 255, cv2.THRESH_BINARY)
        #thresh = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 25)

        ### Extract contours
        contours, hierarchy = cv2.findContours(canny, cv2.RETR_TREE , cv2.CHAIN_APPROX_SIMPLE)

        ### Example how to draw the contours, only for visualization purposes
        # cv2.drawContours(cv_image, contours, -1, (255, 0, 0), 2)
        #cv2.imshow("Contour window",cv_image)
        #cv2.waitKey(0)

        ### Fit elipses to all extracted contours
        elps = []
        for cnt in contours:
            #     print cnt
            #     print cnt.shape
            if cnt.shape[0] >= 20:
                ellipse = cv2.fitEllipse(cnt)
                elps.append(ellipse)


        ### Find two elipses with same centers
        candidates = []
        for n in range(len(elps)):
            for m in range(n + 1, len(elps)):
                e1 = elps[n]
                e2 = elps[m]
                dista = abs(e1[1][0] - e2[1][0])
                distb = abs(e1[1][1] - e2[1][1])
                dist = np.sqrt(((e1[0][0] - e2[0][0]) ** 2 + (e1[0][1] - e2[0][1]) ** 2))
                #             print dist
                if dist < 5 and dista > 3 and distb > 3:
                    candidates.append((e1,e2))

        # Extract the depth from the depth image
        for c in candidates:

            # the centers of the ellipses
            e1 = c[0]
            e2 = c[1]

            # drawing the ellipses on the image
            #cv2.ellipse(cv_image, e1, (0, 255, 0), 2)
            #cv2.ellipse(cv_image, e2, (0, 255, 0), 2)

            sizea = e1[1][0] if e1[1][0] > e2[1][0] else e2[1][0]
            sizeb = e1[1][1] if e1[1][1] > e2[1][1] else e2[1][1]
            center = (e1[0][1], e1[0][0])

            y1 = int(center[0] - sizeb /2)
            y2 = int(center[0] + sizeb /2)
            y_min = y1 if y1>0 else 0
            y_max = y2 if y2<cv_image.shape[0] else cv_image.shape[0]

            x1 = int(center[1] - sizea /2)
            x2 = int(center[1] + sizea /2)
            x_min = x1 if x1 > 0 else 0
            x_max = x2 if x2 < cv_image.shape[1] else cv_image.shape[1]

            #cv2.imshow('ring', cv_image[y_min:y_max,x_min:x_max])
            #cv2.waitKey(1)

            ring_image = cv_image[y_min:y_max,x_min:x_max,:]
            exclude = np.all(ring_image == 178, axis=2)

            color = np.mean(ring_image[~exclude], axis=0)
            # print(f'B: {color[0]} G: {color[1]} R: {color[2]}')
            
            if (np.any(np.isnan(color))):
                return 
            
            color = color /255
            colorRGB = ColorRGBA(color[2], color[1], color[0], 1.0)

            middle = int(center[1] - x_min)
            self.get_pose(e1, depth_image[y_min:y_max,x_min:x_max], middle, timestamp, colorRGB)
           
            


def main():

    ring_finder = The_Ring()
    
    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
        rate.sleep()
        ring_finder.find_ring()

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
