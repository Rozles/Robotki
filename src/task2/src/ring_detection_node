#!/usr/bin/python3

import sys
import rospy
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA


class The_Ring:
    def __init__(self):
        rospy.init_node('ring_detection', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for visualizations
        self.marker_array = MarkerArray()
        self.marker_n = []
        self.marker_num = 1

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('ring_markers', MarkerArray, queue_size=1)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)
        self.tf_listener


    def update_marker_array(self, pose):
        for i, m in enumerate(self.marker_array.markers):
            if np.sqrt((m.pose.position.x - pose.position.x)**2 + (m.pose.position.y - pose.position.y)**2) < 0.5:
                m.pose.position.x = (m.pose.position.x * self.marker_n[i] + pose.position.x) / (self.marker_n[i] + 1)
                m.pose.position.y = (m.pose.position.y * self.marker_n[i] + pose.position.y) / (self.marker_n[i] + 1)
                m.pose.position.z = (m.pose.position.z * self.marker_n[i] + pose.position.z) / (self.marker_n[i] + 1)
                self.marker_n[i] += 1
                return False
        return True


    def publish_markers(self):
        pub_markers = MarkerArray()
        for i, m in enumerate(self.marker_array.markers):
            if self.marker_n[i] > 3:
                pub_markers.markers.append(m)
        self.markers_pub.publish(pub_markers)


    def get_pose(self,e,dist, timestamp, color):
        # Calculate the position of the detected ellipse

        k_f = 525 # kinect focal length in pixels

        elipse_x = self.dims[1] / 2 - e[0][0]
        elipse_y = self.dims[0] / 2 - e[0][1]

        angle_to_target = np.arctan2(elipse_x,k_f)
        angle_height = np.arctan2(elipse_y, k_f)

        # Get the angles in the base_link relative coordinate system
        x,y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)
        z = dist*np.sin(angle_height)

        ### Define a stamped message for transformation - directly in "base_frame"
        point_s = PointStamped()
        point_s.point.x = x
        point_s.point.y = y
        point_s.point.z = z + 0.30
        point_s.header.frame_id = "base_link"
        point_s.header.stamp = timestamp

        # Define a stamped message for transformation - in the "camera rgb frame"
        # point_s = PointStamped()
        # point_s.point.x = -y
        # point_s.point.y = 0
        # point_s.point.z = x
        # point_s.header.frame_id = "camera_rgb_frame"
        # point_s.header.stamp = timestamp

        # Get the point in the "map" coordinate system
        try:
            point_world = self.tf_buf.transform(point_s, "map")
        except Exception as e:
            print(e)
            return
        
        # Create a Pose object with the same position
        pose = Pose()
        pose.position.x = point_world.point.x
        pose.position.y = point_world.point.y
        pose.position.z = point_world.point.z
        pose.orientation.w = 1.0

        if self.update_marker_array(pose):
            self.marker_n.append(1)

            marker_color = ColorRGBA(0, 0, 0, 1)
            if color == 0:
                marker_color = ColorRGBA(0, 0, 1, 1)
            elif color == 1:
                marker_color = ColorRGBA(0, 1, 0, 1)
            elif color == 2:
                marker_color = ColorRGBA(1, 0, 0, 1)
            # Create a marker used for visualization
            self.marker_num += 1
            marker = Marker()
            marker.header.stamp = point_world.header.stamp
            marker.header.frame_id = point_world.header.frame_id
            marker.pose = pose
            marker.type = Marker.CUBE
            marker.action = Marker.ADD
            marker.frame_locked = False
            marker.lifetime = rospy.Duration(0)
            marker.id = self.marker_num
            marker.scale = Vector3(0.1, 0.1, 0.1)
            marker.color = marker_color
            self.marker_array.markers.append(marker)
    

    def find_ring(self):
        try:
            rgb_image_message = rospy.wait_for_message("/camera/rgb/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        try:
            depth_image_message = rospy.wait_for_message("/camera/depth/image_raw", Image)
        except Exception as e:
            print(e)
            return 0
        
        timestamp = depth_image_message.header.stamp

        # Convert the images into a OpenCV (numpy) format
        try:
            cv_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
        except CvBridgeError as e:
            print(e)

        try:
            depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = cv_image.shape

        # Tranform image to gayscale
        #gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        #img = cv2.equalizeHist(gray)
        
        depth_norm = cv2.normalize(depth_image, None, 255, 0, cv2.NORM_MINMAX, cv2.CV_8U)      

        canny = cv2.Canny(depth_norm, 100, 200)
        #cv2.imshow('canny', canny)
        #cv2.waitKey(1)

        

        ### Binarize the image, there are different ways to do it
        #ret, thresh = cv2.threshold(img, 50, 255, 0)
        #ret, thresh = cv2.threshold(img, 70, 255, cv2.THRESH_BINARY)
        #thresh = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 25)

        ### Extract contours
        contours, hierarchy = cv2.findContours(canny, cv2.RETR_TREE , cv2.CHAIN_APPROX_SIMPLE)

        ### Example how to draw the contours, only for visualization purposes
        # cv2.drawContours(cv_image, contours, -1, (255, 0, 0), 2)
        #cv2.imshow("Contour window",cv_image)
        #cv2.waitKey(0)

        ### Fit elipses to all extracted contours
        elps = []
        for cnt in contours:
            #     print cnt
            #     print cnt.shape
            if cnt.shape[0] >= 20:
                ellipse = cv2.fitEllipse(cnt)
                elps.append(ellipse)


        ### Find two elipses with same centers
        candidates = []
        for n in range(len(elps)):
            for m in range(n + 1, len(elps)):
                e1 = elps[n]
                e2 = elps[m]
                dista = abs(e1[1][0] - e2[1][0])
                distb = abs(e1[1][1] - e2[1][1])
                dist = np.sqrt(((e1[0][0] - e2[0][0]) ** 2 + (e1[0][1] - e2[0][1]) ** 2))
                #             print dist
                if dist < 5 and dista > 3 and distb > 3:
                    candidates.append((e1,e2))

        # Extract the depth from the depth image
        for c in candidates:

            # the centers of the ellipses
            e1 = c[0]
            e2 = c[1]

            # drawing the ellipses on the image
            #cv2.ellipse(cv_image, e1, (0, 255, 0), 2)
            #cv2.ellipse(cv_image, e2, (0, 255, 0), 2)

            sizea = e1[1][0] if e1[1][0] > e2[1][0] else e2[1][0]
            sizeb = e1[1][1] if e1[1][1] > e2[1][1] else e2[1][1]
            center = (e1[0][1], e1[0][0])

            y1 = int(center[0] - sizeb /2)
            y2 = int(center[0] + sizeb /2)
            y_min = y1 if y1>0 else 0
            y_max = y2 if y2<cv_image.shape[0] else cv_image.shape[0]

            x1 = int(center[1] - sizea /2)
            x2 = int(center[1] + sizea /2)
            x_min = x1 if x1 > 0 else 0
            x_max = x2 if x2 < cv_image.shape[1] else cv_image.shape[1]

            #cv2.imshow('ring', cv_image[y_min:y_max,x_min:x_max])
            #cv2.waitKey(1)

            ring_image = cv_image[y_min:y_max,x_min:x_max,:]
            blue = np.mean(ring_image[:,:,0])
            green = np.mean(ring_image[:,:,1])
            red = np.mean(ring_image[:,:,2])
            
            #print(f'B: {blue} G: {green} R: {red}')
            
            colors = [blue - 155, green - 155, red - 155]
            if max(colors) < 0:
                color = -1
            else:
                color = colors.index(max(colors))

            

            self.get_pose(e1, float(np.nanmean(depth_image[y_min:y_max,x_min:x_max])), timestamp, color)




def main():

    ring_finder = The_Ring()
    
    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
        rate.sleep()
        ring_finder.find_ring()
        ring_finder.publish_markers()
        

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
