#!/usr/bin/python3

import sys
import rospy
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
import math
import tf.transformations as tft

from os.path import dirname, join

#import matplotlib.pyplot as plt
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose, PoseStamped, Quaternion
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA

class face_localizer:
    def __init__(self):
        rospy.init_node('face_localizer', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # The function for performin HOG face detection
        #self.face_detector = dlib.get_frontal_face_detector()
        protoPath = join(dirname(__file__), "deploy.prototxt.txt")
        modelPath = join(dirname(__file__), "res10_300x300_ssd_iter_140000.caffemodel")

        self.face_net = cv2.dnn.readNetFromCaffe(protoPath, modelPath)

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for showing markers in Rviz
        self.marker_array = MarkerArray()
        self.marker_num = 1
        self.marker_n = []

        # Subscribe to the image and/or depth topic
        # self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
        # self.depth_sub = rospy.Subscriber("/camera/depth/image_raw", Image, self.depth_callback)

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('face_markers', MarkerArray, queue_size=1000)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)

        #ZBRIS
        # self.testpublisher = rospy.Publisher('test_marker', Marker, queue_size=1000)
        
    
    def angle_between(self, q1, q2):
        a1 = tft.euler_from_quaternion([q1.x, q1.y, q1.z, q1.w])[2]
        a2 = tft.euler_from_quaternion([q2.x, q2.y, q2.z, q2.w])[2]
        return abs(a1 - a2)


    def get_pose(self,coords,dist,stamp,depth_image):
        # Calculate the position of the detected face

        k_f = 554 # kinect focal length in pixels

        x1, x2, y1, y2 = coords

        face_x = self.dims[1] / 2 - (x1+x2)/2.
        face_y = self.dims[0] / 2 - (y1+y2)/2.
        right_x = face_x - (x2-x1)/4
        left_x = face_x + (x2-x1)/4
        left_dist = np.nanmean(depth_image[:,:(x2-x1)//2])
        right_dist = np.nanmean(depth_image[:,(x2-x1)//2:])

        left_angle = np.arctan2(left_x, k_f)
        right_angle = np.arctan2(right_x, k_f)
        angle_to_target = np.arctan2(face_x,k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)
        lx, ly = left_dist*np.cos(left_angle), left_dist*np.sin(left_angle)
        rx, ry = right_dist*np.cos(right_angle), right_dist*np.sin(right_angle)
        normalAngle = np.arctan2(-(lx - rx), (ly - ry)) + math.pi
        q = tft.quaternion_from_euler(0.0, 0.0, normalAngle)

        ### Define a stamped message for transformation - directly in "base_link"
        #point_s = PointStamped()
        #point_s.point.x = x
        #point_s.point.y = y
        #point_s.point.z = 0.3
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = rospy.Time(0)

        # Define a stamped message for transformation - in the "camera rgb frame"
        # point_s = PointStamped()
        # point_s.point.x = -y
        # point_s.point.y = 0
        # point_s.point.z = x
        # point_s.header.frame_id = "camera_rgb_optical_frame"
        # point_s.header.stamp = stamp

        # test_l = Marker()
        # test_l.header.stamp = rospy.Time(0)
        # test_l.header.frame_id = 'base_link'
        # test_l.pose = Pose()
        # test_l.pose.position.x = lx
        # test_l.pose.position.y = ly
        # test_l.pose.position.z = 0.3
        # test_l.pose.orientation.x = q[0]
        # test_l.pose.orientation.y = q[1]
        # test_l.pose.orientation.z = q[2]
        # test_l.pose.orientation.w = q[3]
        # test_l.type = Marker.ARROW
        # test_l.action = Marker.ADD
        # test_l.frame_locked = False
        # test_l.lifetime = rospy.Duration(0)
        # test_l.id = self.marker_num
        # test_l.scale = Vector3(0.1, 0.1, 0.1)
        # test_l.color = ColorRGBA(0, 1, 0, 1)

        # self.testpublisher.publish(test_l)

        pose_s = PoseStamped()
        pose_s.pose.position.x = x
        pose_s.pose.position.y = y
        pose_s.pose.position.z = 0.33
        pose_s.pose.orientation.x = q[0]
        pose_s.pose.orientation.y = q[1]
        pose_s.pose.orientation.z = q[2]
        pose_s.pose.orientation.w = q[3]
        pose_s.header.frame_id = "base_link"
        pose_s.header.stamp = stamp

        # Get the point in the "map" coordinate system
        try:
            pose_world = self.tf_buf.transform(pose_s, "map")

            ### Create a Pose object with the same position
            pose = Pose()
            pose.position.x = pose_world.pose.position.x
            pose.position.y = pose_world.pose.position.y
            pose.position.z = pose_world.pose.position.z
            pose.orientation = pose_world.pose.orientation
            if np.isnan(np.array([pose.position.x, pose.position.y, pose.position.z, pose.orientation.x, pose.orientation.y, pose.orientation.z, pose.orientation.w])).any():
                pose = None
        except Exception as e:
            print(e)
            pose = None    
        
        return pose
        

    def find_faces(self):
        # Get the next rgb and depth images that are posted from the camera
        try:
            rgb_image_message = rospy.wait_for_message("/camera/rgb/image_raw", Image)
        except Exception as e:
            print(e)
            return 0

        try:
            depth_image_message = rospy.wait_for_message("/camera/depth/image_raw", Image)
        except Exception as e:
            print(e)
            return 0
        

        # Convert the images into a OpenCV (numpy) format

        try:
            rgb_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
        except CvBridgeError as e:
            print(e)

        try:
            depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
        except CvBridgeError as e:
            print(e)


        # Set the dimensions of the image
        self.dims = rgb_image.shape
        h = self.dims[0]
        w = self.dims[1]

        # Tranform image to gayscale
        #gray = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        #img = cv2.equalizeHist(gray)

        # Detect the faces in the image
        #face_rectangles = self.face_detector(rgb_image, 0)
        blob = cv2.dnn.blobFromImage(cv2.resize(rgb_image, (300, 300)), 1.0, (300, 300), (104.0, 177.0, 123.0))
        self.face_net.setInput(blob)
        face_detections = self.face_net.forward()

        for i in range(0, face_detections.shape[2]):
            confidence = face_detections[0, 0, i, 2]
            if confidence>0.5:
                box = face_detections[0,0,i,3:7] * np.array([w,h,w,h])
                box = box.astype('int')
                x1, y1, x2, y2 = box[0], box[1], box[2], box[3]

                # Extract region containing face
                face_region = rgb_image[y1:y2, x1:x2]

                # Visualize the extracted face
                # cv2.imshow("ImWindow", face_region)
                # cv2.waitKey(1)

                # Find the distance to the detected face
                face_distance = float(np.nanmean(depth_image[y1:y2,x1:x2]))

                print('Distance to face', face_distance)

                # Get the time that the depth image was recieved
                depth_time = depth_image_message.header.stamp

                # Find the location of the detected face
                pose = self.get_pose((x1,x2,y1,y2), face_distance, depth_time, depth_image[y1:y2,x1:x2])

                if pose is not None:
                    new_face = True
                    # Create a marker used for visualization
                    for i, m in enumerate(self.marker_array.markers):
                        angle = self.angle_between(m.pose.orientation, pose.orientation)
                        if (abs(pose.position.x - m.pose.position.x) < 0.3 and abs(pose.position.y - m.pose.position.y) < 0.3 and angle < 1.57):
                            new_face = False
                            m.pose.position.x = (m.pose.position.x * self.marker_n[i] + pose.position.x) / (self.marker_n[i] + 1)
                            m.pose.position.y = (m.pose.position.y * self.marker_n[i] + pose.position.y) / (self.marker_n[i] + 1)
                            m.pose.position.z = (m.pose.position.z * self.marker_n[i] + pose.position.z) / (self.marker_n[i] + 1)
                            m.pose.orientation.x = (m.pose.orientation.x * self.marker_n[i] + pose.orientation.x) / (self.marker_n[i] + 1)
                            m.pose.orientation.y = (m.pose.orientation.y * self.marker_n[i] + pose.orientation.y) / (self.marker_n[i] + 1)
                            m.pose.orientation.z = (m.pose.orientation.z * self.marker_n[i] + pose.orientation.z) / (self.marker_n[i] + 1)
                            m.pose.orientation.w = (m.pose.orientation.w * self.marker_n[i] + pose.orientation.w) / (self.marker_n[i] + 1)
                            self.marker_n[i] += 1
                    if new_face:
                        marker = Marker()
                        marker.header.stamp = rospy.Time(0)
                        marker.header.frame_id = 'map'
                        marker.pose = pose
                        marker.type = Marker.ARROW
                        marker.action = Marker.ADD
                        marker.frame_locked = False
                        marker.lifetime = rospy.Duration(0)
                        marker.id = self.marker_num
                        marker.scale = Vector3(0.15, 0.1, 0.1)
                        marker.color = ColorRGBA(1, 0.7, 0.2, 1)
                        self.marker_array.markers.append(marker)
                        self.marker_n.append(1)
                        self.marker_num += 1
                    
                    self.markers_pub.publish(self.marker_array)

    def depth_callback(self,data):

        try:
            depth_image = self.bridge.imgmsg_to_cv2(data, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Do the necessairy conversion so we can visuzalize it in OpenCV
        
        image_1 = depth_image / np.nanmax(depth_image)
        image_1 = image_1*255
        
        image_viz = np.array(image_1, dtype=np.uint8)

        #cv2.imshow("Depth window", image_viz)
        #cv2.waitKey(1)

        #plt.imshow(depth_image)
        #plt.show()

def main():

        face_finder = face_localizer()

        rate = rospy.Rate(1)
        while not rospy.is_shutdown():
            face_finder.find_faces()
            rate.sleep()

        cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
