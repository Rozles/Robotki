#!/usr/bin/python3

import sys
import math
import rospy
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
import tf.transformations as tft


from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, PoseStamped
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA


class PosterNode:
    def __init__(self):
        rospy.init_node('poster_node', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # Marker array object used for visualizations
        self.face_candidates = MarkerArray()
        self.face_n = []

        # Publiser for the visualization markers
        self.face_pub = rospy.Publisher('face_markers', MarkerArray, queue_size=1)

        self.client = rospy.ServiceProxy()

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)

    def dist(self, p1, p2):
        return np.sqrt((p1.pose.position.x - p2.pose.position.x)**2 + (p1.pose.position.y - p2.pose.position.y)**2)

    def angle_between(self, q1, q2):
        a1 = tft.euler_from_quaternion([q1.x, q1.y, q1.z, q1.w])[2]
        a2 = tft.euler_from_quaternion([q2.x, q2.y, q2.z, q2.w])[2]
        return abs(a1 - a2)

    def merge(self):
        for i, f in enumerate(self.face_candidates.markers):
            for j, f2 in enumerate(self.face_candidates.markers):
                if i != j and self.dist(f, f2) < 0.3 and self.angle_between(f.pose.orientation, f2.pose.orientation):
                    f.pose.position.x = (f.pose.position.x * self.face_n[i] + f2.pose.position.x * self.face_n[j]) / (self.face_n[i] + self.face_n[j])
                    f.pose.position.y = (f.pose.position.y * self.face_n[i] + f2.pose.position.y * self.face_n[j]) / (self.face_n[i] + self.face_n[j])
                    f.pose.position.z = (f.pose.position.z * self.face_n[i] + f2.pose.position.z * self.face_n[j]) / (self.face_n[i] + self.face_n[j])
                    f.pose.orientation.x = (f.pose.orientation.x * self.face_n[i] + f2.pose.orientation.x * self.face_n[j]) / (self.face_n[i] +  self.face_n[j])
                    f.pose.orientation.y = (f.pose.orientation.y * self.face_n[i] + f2.pose.orientation.y * self.face_n[j]) / (self.face_n[i] +  self.face_n[j])
                    f.pose.orientation.z = (f.pose.orientation.z * self.face_n[i] + f2.pose.orientation.z * self.face_n[j]) / (self.face_n[i] +  self.face_n[j])
                    f.pose.orientation.w = (f.pose.orientation.w * self.face_n[i] + f2.pose.orientation.w * self.face_n[j]) / (self.face_n[i] +  self.face_n[j])
                    # normalize the quaternion
                    norm = np.sqrt(f.pose.orientation.x**2 + f.pose.orientation.y**2 + f.pose.orientation.z**2 + f.pose.orientation.w**2)
                    f.pose.orientation.x /= norm
                    f.pose.orientation.y /= norm
                    f.pose.orientation.z /= norm
                    f.pose.orientation.w /= norm
                    self.face_n[i] += self.face_n[j]
                    del self.face_candidates.markers[j]
                    del self.face_n[j]

    def update_face_array(self, pose):
        if pose is not None:
            new_face = True
            marker_array = MarkerArray()
            # Create a marker used for visualization
            for i, m in enumerate(self.face_candidates.markers):
                angle = self.angle_between(m.pose.orientation, pose.pose.orientation)
                if (self.dist(m, pose) < 0.5 and angle < 1.57):
                    new_face = False
                    m.pose.position.x = (m.pose.position.x * self.face_n[i] + pose.pose.position.x) / (self.face_n[i] + 1)
                    m.pose.position.y = (m.pose.position.y * self.face_n[i] + pose.pose.position.y) / (self.face_n[i] + 1)
                    m.pose.position.z = (m.pose.position.z * self.face_n[i] + pose.pose.position.z) / (self.face_n[i] + 1)
                    m.pose.orientation.x = (m.pose.orientation.x * self.face_n[i] + pose.pose.orientation.x) / (self.face_n[i] + 1)
                    m.pose.orientation.y = (m.pose.orientation.y * self.face_n[i] + pose.pose.orientation.y) / (self.face_n[i] + 1)
                    m.pose.orientation.z = (m.pose.orientation.z * self.face_n[i] + pose.pose.orientation.z) / (self.face_n[i] + 1)
                    m.pose.orientation.w = (m.pose.orientation.w * self.face_n[i] + pose.pose.orientation.w) / (self.face_n[i] + 1)
                    # normalize the quaternion
                    norm = np.sqrt(m.pose.orientation.x**2 + m.pose.orientation.y**2 + m.pose.orientation.z**2 + m.pose.orientation.w**2)
                    m.pose.orientation.x /= norm
                    m.pose.orientation.y /= norm
                    m.pose.orientation.z /= norm
                    m.pose.orientation.w /= norm
                    self.face_n[i] += 1
                if self.face_n[i] >= 2:
                    marker_array.markers.append(m)
            if new_face:
                marker = Marker()
                marker.header.stamp = rospy.Time(0)
                marker.header.frame_id = 'map'
                marker.pose = pose.pose
                marker.type = Marker.ARROW
                marker.action = Marker.ADD
                marker.frame_locked = False
                marker.lifetime = rospy.Duration(0)
                marker.id = len(self.face_candidates.markers)
                marker.scale = Vector3(0.15, 0.1, 0.1)
                marker.color = ColorRGBA(1, 0.7, 0.2, 1)
                self.face_candidates.markers.append(marker)
                self.face_n.append(1)

            self.face_pub.publish(marker_array)

    def get_face_pose(self,coords,dist,stamp,depth_image):
        # Calculate the position of the detected face

        k_f = 554 # kinect focal length in pixels

        x1, x2, y1, y2 = coords

        face_x = self.dims[1] / 2 - (x1+x2)/2.
        face_y = self.dims[0] / 2 - (y1+y2)/2.
        right_x = face_x - (x2-x1)/4
        left_x = face_x + (x2-x1)/4
        try:
            left_dist = np.nanmean(depth_image[:,:(x2-x1)//2])
            right_dist = np.nanmean(depth_image[:,(x2-x1)//2:])
        except RuntimeWarning as w:
            return

        left_angle = np.arctan2(left_x, k_f)
        right_angle = np.arctan2(right_x, k_f)
        angle_to_target = np.arctan2(face_x,k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)
        lx, ly = left_dist*np.cos(left_angle), left_dist*np.sin(left_angle)
        rx, ry = right_dist*np.cos(right_angle), right_dist*np.sin(right_angle)
        normalAngle = np.arctan2(-(lx - rx), (ly - ry)) + math.pi
        q = tft.quaternion_from_euler(0.0, 0.0, normalAngle)

        pose_s = PoseStamped()
        pose_s.pose.position.x = x
        pose_s.pose.position.y = y
        pose_s.pose.position.z = 0.33
        pose_s.pose.orientation.x = q[0]
        pose_s.pose.orientation.y = q[1]
        pose_s.pose.orientation.z = q[2]
        pose_s.pose.orientation.w = q[3]
        pose_s.header.frame_id = "base_link"
        pose_s.header.stamp = stamp

        # Get the point in the "map" coordinate system
        try:
            pose_world = self.tf_buf.transform(pose_s, "map")

            if np.isnan(np.array([pose_world.pose.position.x, pose_world.pose.position.y, pose_world.pose.position.z, pose_world.pose.orientation.x, pose_world.pose.orientation.y, pose_world.pose.orientation.z, pose_world.pose.orientation.w])).any():
                pose_world = None
        except Exception as e:
            print(e)
            pose_world = None    

        self.update_face_array(pose_world)


    def image_callback(self, rgb_data, depth_data):
        try:
            rgb_image = self.bridge.imgmsg_to_cv2(rgb_data, "bgr8")
            depth_image = self.bridge.imgmsg_to_cv2(depth_data, "32FC1")
        except CvBridgeError as e:
            print(e)
            return

        timestamp = rgb_data.header.stamp

        # Get the dimensions of the image
        self.dims = rgb_image.shape
        h = self.dims[0]
        w = self.dims[1]

        # Tranform image to gayscale
        #gray = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        #img = cv2.equalizeHist(gray)

        # Detect the faces in the image
        #face_rectangles = self.face_detector(rgb_image, 0)
        blob = cv2.dnn.blobFromImage(cv2.resize(rgb_image, (300, 300)), 1.0, (300, 300), (104.0, 177.0, 123.0))
        
        self.face_net.setInput(blob)
        face_detections = self.face_net.forward()

        for i in range(0, face_detections.shape[2]):
            confidence = face_detections[0, 0, i, 2]
            if confidence>0.5:
                box = face_detections[0,0,i,3:7] * np.array([w,h,w,h])
                box = box.astype('int')
                x1, y1, x2, y2 = box[0], box[1], box[2], box[3]

                # Extract region containing face
                face_region = rgb_image[y1:y2, x1:x2]

                # Visualize the extracted face
                # cv2.imshow("ImWindow", face_region)
                # cv2.waitKey(1)

                # Find the distance to the detected face
                face_distance = float(np.nanmean(depth_image[y1:y2,x1:x2]))

                # Find the location of the detected face
                self.get_face_pose((x1,x2,y1,y2), face_distance, timestamp, depth_image[y1:y2,x1:x2])


def main():

    poster = PosterNode()

    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
        rate.sleep()

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()