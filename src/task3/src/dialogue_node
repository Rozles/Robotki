#!/usr/bin/python3

import rospy
import speech_recognition as sr
import subprocess
import time
import re

from std_msgs.msg import String

from task3.srv import DialogueService


def play_sound(text):
    subprocess.run(["rosrun", "sound_play", "say.py", text])

# The information should include a reference to two cylinders
def check_information(text):
    color_options = ['blue', 'red', 'green', 'yellow']
    cylinder_keywords = ['cylinder', 'one']
    
    pattern = r"(?i)(\b(?:{})\b).*?(?:{})".format('|'.join(color_options), '|'.join(cylinder_keywords))
    
    match = re.search(pattern, text)
    
    if match:
        colors = re.findall(r"\b(?:{})\b".format('|'.join(color_options)), text)
        return True, colors[0], colors[1] if len(colors) >= 2 else None
    else:
        return False, "", ""


def callback(request):
    print("Service je bil poklican")
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()

    useful = False
    response = DialogueService._response_class()
    max_response_count = 2 # How many times we can get a useless response before finishing the convo

    while True:
        play_sound("Do you know where the robber is hiding?")

        with microphone as source:
            audio = recognizer.listen(source)
        try:                
            text = recognizer.recognize_google(audio)
            print("Answer: ", text)
            useful, color1, color2 = check_information(text)
            response.color1 = color1
            response.color2 = color2

            if useful:
                break

            max_response_count -= 1

            if max_response_count <= 0:
                response.color1 = "bad_response"
                response.color2 = "bad_response"
                break

        except sr.UnknownValueError:
            print("Unable to recognize speech.")

    play_sound("OK, thank you")

    return response

def speech_recognition_node():
    rospy.init_node('speech_recognition_node', anonymous=True)
    result_service = rospy.Service('dialogue_result', DialogueService, callback)
    rospy.spin()

if __name__ == '__main__':
    try:
        speech_recognition_node()
    except rospy.ROSInterruptException:
        pass
